!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/danecchio/networks_f24/cmu-tcp/project-2_15-441/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(BUILD_DIR)/%.o	Makefile	/^$(BUILD_DIR)\/%.o: $(SRC_DIR)\/%.c$/;"	t
ACK_FLAG_MASK	inc/cmu_packet.h	/^#define ACK_FLAG_MASK /;"	d
ACK_MASK	tests/common.py	/^ACK_MASK = 0x4$/;"	v
BUF_SIZE	src/server.c	/^#define BUF_SIZE /;"	d	file:
BUILD_DIR	Makefile	/^BUILD_DIR = $(TOP_DIR)\/build$/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CMUTCP	tests/common.py	/^class CMUTCP(Packet):$/;"	c
CODE_DIR	tests/common.py	/^CODE_DIR = "\/vagrant\/project-2_15-441"$/;"	v
CP1_WINDOW_SIZE	inc/grading.h	/^#define CP1_WINDOW_SIZE /;"	d
DEFAULT_TIMEOUT	inc/grading.h	/^#define DEFAULT_TIMEOUT /;"	d
EXIT_ERROR	inc/cmu_tcp.h	/^#define EXIT_ERROR /;"	d
EXIT_FAILURE	inc/cmu_tcp.h	/^#define EXIT_FAILURE /;"	d
EXIT_SUCCESS	inc/cmu_tcp.h	/^#define EXIT_SUCCESS /;"	d
FILE_TO_READ	gen_graph.py	/^FILE_TO_READ = "capture.pcap"$/;"	v
FIN_FLAG_MASK	inc/cmu_packet.h	/^#define FIN_FLAG_MASK /;"	d
FIN_MASK	tests/common.py	/^FIN_MASK = 0x2$/;"	v
FLAGS	Makefile	/^FLAGS = -pthread -fPIC -g -ggdb -pedantic -Wall -Wextra -DDEBUG -I$(INC_DIR)$/;"	m
HOSTNAME	tests/common.py	/^    HOSTNAME = "client"$/;"	v
HOSTNAME	tests/common.py	/^    HOSTNAME = "server"$/;"	v
HOSTNAME	tests/common.py	/^HOSTNAME = subprocess.check_output("hostname").strip()$/;"	v
HOST_IP	tests/common.py	/^HOST_IP = IP_ADDRS[HOSTNAME]$/;"	v
HOST_MAC	tests/common.py	/^HOST_MAC = MAC_ADDRS[HOSTNAME]$/;"	v
HOST_PORT	tests/common.py	/^HOST_PORT = 1234$/;"	v
IDENTIFIER	inc/cmu_packet.h	/^#define IDENTIFIER /;"	d
IFNAME	tests/common.py	/^IFNAME = os.getenv("IFNAME")$/;"	v
INC_DIR	Makefile	/^INC_DIR = $(TOP_DIR)\/inc$/;"	m
IP_ADDRS	tests/common.py	/^IP_ADDRS = {"client": "10.0.1.2", "server": "10.0.1.1"}$/;"	v
MAC_ADDRS	tests/common.py	/^MAC_ADDRS = {"client": "08:00:27:a7:fe:b1", "server": "08:00:27:22:47:1c"}$/;"	v
MAX_LEN	inc/grading.h	/^#define MAX_LEN /;"	d
MAX_NETWORK_BUFFER	inc/grading.h	/^#define MAX_NETWORK_BUFFER /;"	d
MIN	src/backend.c	/^#define MIN(/;"	d	file:
MSS	inc/cmu_packet.h	/^#define MSS /;"	d
NO_FLAG	inc/cmu_tcp.h	/^  NO_FLAG = 0,  \/\/ Default behavior: block indefinitely until data is available.$/;"	e	enum:__anon0cdd8dcf0403
NO_WAIT	inc/cmu_tcp.h	/^  NO_WAIT,      \/\/ Return immediately if no data is available.$/;"	e	enum:__anon0cdd8dcf0403
OBJS	Makefile	/^OBJS = $(BUILD_DIR)\/cmu_packet.o $(BUILD_DIR)\/cmu_tcp.o $(BUILD_DIR)\/backend.o$/;"	m
PCAP	tests/common.py	/^PCAP = "\/vagrant\/project-2_15-441\/tests\/test.pcap"$/;"	v
PROJECT_2_15_441_INC_BACKEND_H_	inc/backend.h	/^#define PROJECT_2_15_441_INC_BACKEND_H_$/;"	d
PROJECT_2_15_441_INC_CMU_PACKET_H_	inc/cmu_packet.h	/^#define PROJECT_2_15_441_INC_CMU_PACKET_H_$/;"	d
PROJECT_2_15_441_INC_CMU_TCP_H_	inc/cmu_tcp.h	/^#define PROJECT_2_15_441_INC_CMU_TCP_H_$/;"	d
PROJECT_2_15_441_INC_GRADING_H_	inc/grading.h	/^#define PROJECT_2_15_441_INC_GRADING_H_$/;"	d
SRC_DIR	Makefile	/^SRC_DIR = $(TOP_DIR)\/src$/;"	m
START_TESTING_SERVER_CMD	tests/common.py	/^START_TESTING_SERVER_CMD = ($/;"	v
STOP_TESTING_SERVER_CMD	tests/common.py	/^STOP_TESTING_SERVER_CMD = "tmux kill-session -t pytest_server"$/;"	v
SYN_FLAG_MASK	inc/cmu_packet.h	/^#define SYN_FLAG_MASK /;"	d
SYN_MASK	tests/common.py	/^SYN_MASK = 0x8$/;"	v
TCP_INITIATOR	inc/cmu_tcp.h	/^  TCP_INITIATOR = 0,$/;"	e	enum:__anon0cdd8dcf0203
TCP_LISTENER	inc/cmu_tcp.h	/^  TCP_LISTENER = 1,$/;"	e	enum:__anon0cdd8dcf0203
TESTING_HOSTNAME	tests/common.py	/^    TESTING_HOSTNAME = "client"$/;"	v
TESTING_HOSTNAME	tests/common.py	/^    TESTING_HOSTNAME = "server"$/;"	v
TESTING_HOST_IP	tests/common.py	/^TESTING_HOST_IP = IP_ADDRS[TESTING_HOSTNAME]$/;"	v
TESTING_HOST_MAC	tests/common.py	/^TESTING_HOST_MAC = MAC_ADDRS[TESTING_HOSTNAME]$/;"	v
TESTING_HOST_PORT	tests/common.py	/^TESTING_HOST_PORT = 15441$/;"	v
TIMEOUT	inc/cmu_tcp.h	/^  TIMEOUT,      \/\/ Block until data is available or the timeout is reached.$/;"	e	enum:__anon0cdd8dcf0403
TIMEOUT	tests/common.py	/^TIMEOUT = 3$/;"	v
TOP_DIR	Makefile	/^TOP_DIR = .$/;"	m
WINDOW_INITIAL_SSTHRESH	inc/grading.h	/^#define WINDOW_INITIAL_SSTHRESH /;"	d
WINDOW_INITIAL_WINDOW_SIZE	inc/grading.h	/^#define WINDOW_INITIAL_WINDOW_SIZE /;"	d
__anon0cdd8dcf0108	inc/cmu_tcp.h	/^typedef struct {$/;"	s
__anon0cdd8dcf0203	inc/cmu_tcp.h	/^typedef enum {$/;"	g
__anon0cdd8dcf0308	inc/cmu_tcp.h	/^typedef struct {$/;"	s
__anon0cdd8dcf0403	inc/cmu_tcp.h	/^typedef enum {$/;"	g
__anona48137a00108	inc/cmu_packet.h	/^typedef struct {$/;"	s
ack_num	inc/cmu_packet.h	/^  uint32_t ack_num;            \/\/ Acknowledgement number.$/;"	m	struct:__anona48137a00108	typeref:typename:uint32_t
advertised_window	inc/cmu_packet.h	/^  uint16_t advertised_window;  \/\/ Advertised window.$/;"	m	struct:__anona48137a00108	typeref:typename:uint16_t
after	inc/cmu_packet.h	/^static inline int after(uint32_t seq1, uint32_t seq2) {$/;"	f	typeref:typename:int
all	Makefile	/^all: server client tests\/testing_server$/;"	t
analyze	utils/capture_packets.sh	/^analyze() {$/;"	f
answers	tests/common.py	/^    def answers(self, other):$/;"	m	class:CMUTCP
base	gen_graph.py	/^            base = time$/;"	v
base	gen_graph.py	/^base = 0$/;"	v
before	inc/cmu_packet.h	/^static inline int before(uint32_t seq1, uint32_t seq2) {$/;"	f	typeref:typename:int
begin_backend	src/backend.c	/^void *begin_backend(void *in) {$/;"	f	typeref:typename:void *
between	inc/cmu_packet.h	/^static inline int between(uint32_t seq, uint32_t low, uint32_t high) {$/;"	f	typeref:typename:int
buffer	inc/cmu_tcp.h	/^  uint8_t *buffer;$/;"	m	struct:__anon0cdd8dcf0108	typeref:typename:uint8_t *
check_for_data	src/backend.c	/^uint8_t * check_for_data(cmu_socket_t *sock, cmu_read_mode_t flags) {$/;"	f	typeref:typename:uint8_t *
check_for_data_wrapper	src/backend.c	/^void check_for_data_wrapper(cmu_socket_t *sock, cmu_read_mode_t flags) {$/;"	f	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
client	Makefile	/^client: $(OBJS) $(SRC_DIR)\/client.c$/;"	t
cmu_close	src/cmu_tcp.c	/^int cmu_close(cmu_socket_t *sock) {$/;"	f	typeref:typename:int
cmu_read	src/cmu_tcp.c	/^int cmu_read(cmu_socket_t *sock, void *buf, int length, cmu_read_mode_t flags) {$/;"	f	typeref:typename:int
cmu_read_mode_t	inc/cmu_tcp.h	/^} cmu_read_mode_t;$/;"	t	typeref:enum:__anon0cdd8dcf0403
cmu_socket	src/cmu_tcp.c	/^int cmu_socket(cmu_socket_t *sock, const cmu_socket_type_t socket_type,$/;"	f	typeref:typename:int
cmu_socket_t	inc/cmu_tcp.h	/^} cmu_socket_t;$/;"	t	typeref:struct:__anon0cdd8dcf0308
cmu_socket_type_t	inc/cmu_tcp.h	/^} cmu_socket_type_t;$/;"	t	typeref:enum:__anon0cdd8dcf0203
cmu_tcp_header_t	inc/cmu_packet.h	/^} __attribute__((__packed__)) cmu_tcp_header_t;$/;"	t	typeref:struct:__anona48137a00108
cmu_write	src/cmu_tcp.c	/^int cmu_write(cmu_socket_t *sock, const void *buf, int length) {$/;"	f	typeref:typename:int
conn	inc/cmu_tcp.h	/^  struct sockaddr_in conn;$/;"	m	struct:__anon0cdd8dcf0308	typeref:struct:sockaddr_in
create_packet	src/cmu_packet.c	/^uint8_t* create_packet(uint16_t src, uint16_t dst, uint32_t seq, uint32_t ack,$/;"	f	typeref:typename:uint8_t *
death_lock	inc/cmu_tcp.h	/^  pthread_mutex_t death_lock;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:pthread_mutex_t
destination_port	inc/cmu_packet.h	/^  uint16_t destination_port;   \/\/ Destination port.$/;"	m	struct:__anona48137a00108	typeref:typename:uint16_t
dissector	utils/tcp.lua	/^function tcp.dissector(tvb, pInfo, root) -- Tvb, Pinfo, TreeItem$/;"	f	unknown:tcp
dying	inc/cmu_tcp.h	/^  int dying;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:int
eth	tests/common.py	/^eth = Ether(src=HOST_MAC, dst=TESTING_HOST_MAC)$/;"	v
extension_data	inc/cmu_packet.h	/^  uint8_t extension_data[];    \/\/ Extension data.$/;"	m	struct:__anona48137a00108	typeref:typename:uint8_t[]
extension_length	inc/cmu_packet.h	/^  uint16_t extension_length;   \/\/ Extension length.$/;"	m	struct:__anona48137a00108	typeref:typename:uint16_t
fields_desc	tests/common.py	/^    fields_desc = [$/;"	v	class:CMUTCP
flags	inc/cmu_packet.h	/^  uint8_t flags;               \/\/ Flags.$/;"	m	struct:__anona48137a00108	typeref:typename:uint8_t
format	Makefile	/^format:$/;"	t
functionality	src/client.c	/^void functionality(cmu_socket_t *sock) {$/;"	f	typeref:typename:void
functionality	src/server.c	/^void functionality(cmu_socket_t *sock) {$/;"	f	typeref:typename:void
functionality	tests/testing_server.c	/^void functionality(cmu_socket_t *sock) {$/;"	f	typeref:typename:void
get_ack	src/cmu_packet.c	/^uint32_t get_ack(cmu_tcp_header_t* header) { return ntohl(header->ack_num); }$/;"	f	typeref:typename:uint32_t
get_advertised_window	src/cmu_packet.c	/^uint16_t get_advertised_window(cmu_tcp_header_t* header) {$/;"	f	typeref:typename:uint16_t
get_dst	src/cmu_packet.c	/^uint16_t get_dst(cmu_tcp_header_t* header) {$/;"	f	typeref:typename:uint16_t
get_extension_data	src/cmu_packet.c	/^uint8_t* get_extension_data(cmu_tcp_header_t* header) {$/;"	f	typeref:typename:uint8_t *
get_extension_length	src/cmu_packet.c	/^uint16_t get_extension_length(cmu_tcp_header_t* header) {$/;"	f	typeref:typename:uint16_t
get_flags	src/cmu_packet.c	/^uint8_t get_flags(cmu_tcp_header_t* header) { return header->flags; }$/;"	f	typeref:typename:uint8_t
get_hlen	src/cmu_packet.c	/^uint16_t get_hlen(cmu_tcp_header_t* header) { return ntohs(header->hlen); }$/;"	f	typeref:typename:uint16_t
get_payload	src/cmu_packet.c	/^uint8_t* get_payload(uint8_t* pkt) {$/;"	f	typeref:typename:uint8_t *
get_payload_len	src/cmu_packet.c	/^uint16_t get_payload_len(uint8_t* pkt) {$/;"	f	typeref:typename:uint16_t
get_plen	src/cmu_packet.c	/^uint16_t get_plen(cmu_tcp_header_t* header) { return ntohs(header->plen); }$/;"	f	typeref:typename:uint16_t
get_seq	src/cmu_packet.c	/^uint32_t get_seq(cmu_tcp_header_t* header) { return ntohl(header->seq_num); }$/;"	f	typeref:typename:uint32_t
get_src	src/cmu_packet.c	/^uint16_t get_src(cmu_tcp_header_t* header) {$/;"	f	typeref:typename:uint16_t
handle_message	src/backend.c	/^void handle_message(cmu_socket_t *sock, uint8_t *pkt) {$/;"	f	typeref:typename:void
has_been_acked	src/backend.c	/^int has_been_acked(cmu_socket_t *sock, uint32_t seq) {$/;"	f	typeref:typename:int
hlen	gen_graph.py	/^        hlen = int.from_bytes(payload[16:18], byteorder="big")$/;"	v
hlen	inc/cmu_packet.h	/^  uint16_t hlen;               \/\/ Header length.$/;"	m	struct:__anona48137a00108	typeref:typename:uint16_t
identifier	inc/cmu_packet.h	/^  uint32_t identifier;         \/\/ Identifier for the CMU-TCP protocol.$/;"	m	struct:__anona48137a00108	typeref:typename:uint32_t
ip	tests/common.py	/^ip = IP(src=HOST_IP, dst=TESTING_HOST_IP)$/;"	v
last_ack_received	inc/cmu_tcp.h	/^  uint32_t last_ack_received;$/;"	m	struct:__anon0cdd8dcf0108	typeref:typename:uint32_t
main	src/client.c	/^int main() {$/;"	f	typeref:typename:int
main	src/server.c	/^int main() {$/;"	f	typeref:typename:int
main	tests/testing_server.c	/^int main() {$/;"	f	typeref:typename:int
mask	gen_graph.py	/^        mask = int.from_bytes(payload[20:21], byteorder="big")$/;"	v
my_port	inc/cmu_tcp.h	/^  uint16_t my_port;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:uint16_t
name	tests/common.py	/^    name = "CMU TCP"$/;"	v	class:CMUTCP
next_seq_expected	inc/cmu_tcp.h	/^  uint32_t next_seq_expected;$/;"	m	struct:__anon0cdd8dcf0108	typeref:typename:uint32_t
num_packets	gen_graph.py	/^            num_packets = max(num_packets - 1, 0)$/;"	v
num_packets	gen_graph.py	/^            num_packets = num_packets + 1$/;"	v
num_packets	gen_graph.py	/^num_packets = 0$/;"	v
packet_list	gen_graph.py	/^packet_list = []$/;"	v
packets	gen_graph.py	/^packets = rdpcap(FILE_TO_READ)$/;"	v
payload	gen_graph.py	/^    payload = packet[Raw].load$/;"	v
payloads	tests/test_cp1_basic_ack_packets.py	/^payloads = ["pa", "pytest 1234567"]$/;"	v
plen	gen_graph.py	/^        plen = int.from_bytes(payload[18:20], byteorder="big")$/;"	v
plen	inc/cmu_packet.h	/^  uint16_t plen;               \/\/ Packet length.$/;"	m	struct:__anona48137a00108	typeref:typename:uint16_t
plt	gen_graph.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
received_buf	inc/cmu_tcp.h	/^  uint8_t* received_buf;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:uint8_t *
received_len	inc/cmu_tcp.h	/^  int received_len;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:int
recv_lock	inc/cmu_tcp.h	/^  pthread_mutex_t recv_lock;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:pthread_mutex_t
send_lock	inc/cmu_tcp.h	/^  pthread_mutex_t send_lock;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:pthread_mutex_t
sending_buf	inc/cmu_tcp.h	/^  uint8_t* sending_buf;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:uint8_t *
sending_len	inc/cmu_tcp.h	/^  int sending_len;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:int
seq_num	inc/cmu_packet.h	/^  uint32_t seq_num;            \/\/ Sequence number.$/;"	m	struct:__anona48137a00108	typeref:typename:uint32_t
server	Makefile	/^server: $(OBJS) $(SRC_DIR)\/server.c$/;"	t
server_port	gen_graph.py	/^server_port = 15441$/;"	v
set_ack	src/cmu_packet.c	/^void set_ack(cmu_tcp_header_t* header, uint32_t ack) {$/;"	f	typeref:typename:void
set_advertised_window	src/cmu_packet.c	/^void set_advertised_window(cmu_tcp_header_t* header, uint16_t adv_window) {$/;"	f	typeref:typename:void
set_dst	src/cmu_packet.c	/^void set_dst(cmu_tcp_header_t* header, uint16_t dst) {$/;"	f	typeref:typename:void
set_extension_data	src/cmu_packet.c	/^void set_extension_data(cmu_tcp_header_t* header, uint8_t* ext_data) {$/;"	f	typeref:typename:void
set_extension_length	src/cmu_packet.c	/^void set_extension_length(cmu_tcp_header_t* header, uint16_t ext) {$/;"	f	typeref:typename:void
set_flags	src/cmu_packet.c	/^void set_flags(cmu_tcp_header_t* header, uint8_t flags) {$/;"	f	typeref:typename:void
set_header	src/cmu_packet.c	/^void set_header(cmu_tcp_header_t* header, uint16_t src, uint16_t dst,$/;"	f	typeref:typename:void
set_hlen	src/cmu_packet.c	/^void set_hlen(cmu_tcp_header_t* header, uint16_t hlen) {$/;"	f	typeref:typename:void
set_payload	src/cmu_packet.c	/^void set_payload(uint8_t* pkt, uint8_t* payload, uint16_t payload_len) {$/;"	f	typeref:typename:void
set_plen	src/cmu_packet.c	/^void set_plen(cmu_tcp_header_t* header, uint16_t plen) {$/;"	f	typeref:typename:void
set_seq	src/cmu_packet.c	/^void set_seq(cmu_tcp_header_t* header, uint32_t seq) {$/;"	f	typeref:typename:void
set_src	src/cmu_packet.c	/^void set_src(cmu_tcp_header_t* header, uint16_t src) {$/;"	f	typeref:typename:void
single_send	src/backend.c	/^void single_send(cmu_socket_t *sock, uint8_t *data, int buf_len) {$/;"	f	typeref:typename:void
socket	inc/cmu_tcp.h	/^  int socket;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:int
source_port	inc/cmu_packet.h	/^  uint16_t source_port;        \/\/ Source port.$/;"	m	struct:__anona48137a00108	typeref:typename:uint16_t
start	utils/capture_packets.sh	/^start() {$/;"	f
stop	utils/capture_packets.sh	/^stop() {$/;"	f
test	Makefile	/^test:$/;"	t
test_basic_ack_packets	tests/test_cp1_basic_ack_packets.py	/^def test_basic_ack_packets():$/;"	f
test_basic_reliable_data_transfer	tests/test_cp1.py	/^def test_basic_reliable_data_transfer():$/;"	f
test_basic_retransmit	tests/test_cp1.py	/^def test_basic_retransmit():$/;"	f
test_pcap_acks	tests/test_cp1.py	/^def test_pcap_acks():$/;"	f
test_pcap_packets_max_size	tests/test_cp1.py	/^def test_pcap_packets_max_size():$/;"	f
test_run_server_client	tests/test_cp1.py	/^def test_run_server_client():$/;"	f
tests/testing_server	Makefile	/^tests\/testing_server: $(OBJS)$/;"	t
thread_id	inc/cmu_tcp.h	/^  pthread_t thread_id;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:pthread_t
time	gen_graph.py	/^        time = packet.time$/;"	v
times	gen_graph.py	/^times = []$/;"	v
type	inc/cmu_tcp.h	/^  cmu_socket_type_t type;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:cmu_socket_type_t
udp	tests/common.py	/^udp = UDP(sport=HOST_PORT, dport=TESTING_HOST_PORT)$/;"	v
wait_cond	inc/cmu_tcp.h	/^  pthread_cond_t wait_cond;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:pthread_cond_t
window	inc/cmu_tcp.h	/^  window_t window;$/;"	m	struct:__anon0cdd8dcf0308	typeref:typename:window_t
window_t	inc/cmu_tcp.h	/^} window_t;$/;"	t	typeref:struct:__anon0cdd8dcf0108
